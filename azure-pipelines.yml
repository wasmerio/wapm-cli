name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

# The Different jobs (lint, test)
jobs:
- job: Lint
  pool:
    vmImage: 'macos-10.14'
  steps:
  - checkout: self
    submodules: true
  - template: .azure/install-rust.yml
  - script: |
      rustup component add rustfmt
      # rustup component add clippy || cargo install --git https://github.com/rust-lang/rust-clippy/ --force clippy
    displayName: Lint dependencies
  - script: cargo fmt --all -- --check
    displayName: Lint

  variables:
    rust_toolchain: stable

- job: Test
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-18.04'
        rust_toolchain: stable
      mac:
        imageName: 'macos-10.14'
        rust_toolchain: stable
      windows:
        imageName: 'vs2017-win2016'
        rust_toolchain: stable

  pool:
    vmImage: $(imageName)

  steps:
    - checkout: self
      submodules: true
    - template: .azure/install-rust.yml
    - template: .azure/install-sccache.yml
    - template: .azure/install-cmake.yml
    - bash: |
        cargo test --verbose --features "update-notifications" -- --test-threads=1
      displayName: Tests
    - bash: |
        make integration-tests
      displayName: Integration Tests
    - bash: |
        cargo test --manifest-path lib/wasm-interface/Cargo.toml
      displayName: Tests (Wasm Interface)
    - bash: |
        cargo check --features "telemetry update-notifications"
      displayName: Check

    # Regression tests
    - bash: |
        cargo build --verbose
      displayName: 'Regression test: build wapm'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - bash: |
        curl https://get.wasmer.io -sSfL | sh
      displayName: 'Regression test: install wasmer'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - script: |
        export PATH=$PATH:$HOME/.cargo/bin
        export PATH=$PATH:$HOME/.wasmer/bin
        export WAPM_DISABLE_COLOR=true
        rm $WASMER_DIR/wapm.sqlite
        rm $WASMER_DIR/globals/wapm.lock
        rm -rf wapm_packages
        rm wapm.toml
        rm wapm.lock
        chmod +x end-to-end-tests/install.sh
        echo "RUNNING SCRIPT..."
        ./end-to-end-tests/install.sh &> /tmp/install-out.txt
        echo "GENERATED OUTPUT:"
        cat /tmp/install-out.txt
        echo "COMPARING..."
        diff -Bba end-to-end-tests/install.txt /tmp/install-out.txt
        export OUT=$?
        if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        rm /tmp/install-out.txt
        if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
        exit $OUT
      displayName: 'Regression test: Install, Uninstall, Run, and List'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - script: |
        export PATH=$PATH:$HOME/.cargo/bin
        export PATH=$PATH:$HOME/.wasmer/bin
        export WAPM_DISABLE_COLOR=true
        rm $WASMER_DIR/wapm.sqlite
        rm $WASMER_DIR/globals/wapm.lock
        rm -rf wapm_packages
        rm wapm.toml
        rm wapm.lock
        chmod +x end-to-end-tests/verification.sh
        echo "RUNNING SCRIPT..."
        ./end-to-end-tests/verification.sh &> /tmp/verification-out.txt
        echo "GENERATED OUTPUT:"
        cat /tmp/verification-out.txt
        echo "COMPARING..."
        diff -Bba end-to-end-tests/verification.txt /tmp/verification-out.txt
        export OUT=$?
        if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        rm /tmp/verification-out.txt
        if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
        exit $OUT
      displayName: 'Regression test: verification and public key management'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    # - script: |
    #     export PATH=$PATH:$HOME/.cargo/bin
    #     export PATH=$PATH:$HOME/.wasmer/bin
    #     export WAPM_DISABLE_COLOR=true
    #     rm $HOME/.wasmer/wapm.sqlite
    #     rm $HOME/.wasmer/globals/wapm.lock
    #     rm -rf wapm_packages
    #     rm wapm.toml
    #     rm wapm.lock
    #     chmod +x end-to-end-tests/package-fs-mapping.sh
    #     echo "RUNNING SCRIPT..."
    #     ./end-to-end-tests/package-fs-mapping.sh &> /tmp/package-fs-mapping-out.txt
    #     echo "GENERATED OUTPUT:"
    #     cat /tmp/package-fs-mapping-out.txt
    #     echo "COMPARING..."
    #     ## hack to get the current directory in the expected output
    #     #sed -i.bak "s/{{CURRENT_DIR}}/$(pwd | sed 's/\//\\\//g')/g" end-to-end-tests/package-fs-mapping.txt
    #     diff -Bba end-to-end-tests/package-fs-mapping.txt /tmp/package-fs-mapping-out.txt
    #     export OUT=$?
    #     if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
    #     rm wapm.lock
    #     rm wapm.toml
    #     rm -rf wapm_packages
    #     rm /tmp/package-fs-mapping-out.txt
    #     rm $HOME/.wasmer/wapm.sqlite
    #     if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
    #     exit $OUT
    #   displayName: 'Regression test: pkg_fs works globally and when installed locally'
    #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - script: |
        export PATH=$PATH:$HOME/.cargo/bin
        export PATH=$PATH:$HOME/.wasmer/bin
        export WAPM_DISABLE_COLOR=true
        rm $HOME/.wasmer/wapm.sqlite
        rm $HOME/.wasmer/globals/wapm.lock
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        chmod +x end-to-end-tests/manifest-validation.sh
        echo "RUNNING SCRIPT..."
        ./end-to-end-tests/manifest-validation.sh &> /tmp/manifest-validation-out.txt
        echo "GENERATED OUTPUT:"
        cat /tmp/manifest-validation-out.txt
        echo "COMPARING..."
        diff -Bba end-to-end-tests/manifest-validation.txt /tmp/manifest-validation-out.txt
        export OUT=$?
        if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        rm /tmp/manifest-validation-out.txt
        rm $HOME/.wasmer/wapm.sqlite
        if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
        exit $OUT
      displayName: 'Regression test: manifest validation rejects invalid manifests'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - script: |
        export PATH=$PATH:$HOME/.cargo/bin
        export PATH=$PATH:$HOME/.wasmer/bin
        export WAPM_DISABLE_COLOR=true
        rm $HOME/.wasmer/wapm.sqlite
        rm $HOME/.wasmer/globals/wapm.lock
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        chmod +x end-to-end-tests/validate-global.sh
        echo "RUNNING SCRIPT..."
        ./end-to-end-tests/validate-global.sh &> /tmp/validate-global-out.txt
        echo "GENERATED OUTPUT:"
        cat /tmp/validate-global-out.txt
        echo "COMPARING..."
        diff -Bba end-to-end-tests/validate-global.txt /tmp/validate-global-out.txt
        export OUT=$?
        if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        rm /tmp/validate-global-out.txt
        rm $HOME/.wasmer/wapm.sqlite
        if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
        exit $OUT
      displayName: 'Regression test: package fs and command rename'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - script: |
        export PATH=$PATH:$HOME/.cargo/bin
        export PATH=$PATH:$HOME/.wasmer/bin
        export WAPM_DISABLE_COLOR=true
        rm $WASMER_DIR/wapm.sqlite
        rm $WASMER_DIR/globals/wapm.lock
        rm -rf wapm_packages
        rm wapm.toml
        rm wapm.lock
        chmod +x end-to-end-tests/init-and-add.sh
        echo "RUNNING SCRIPT..."
        ./end-to-end-tests/init-and-add.sh &> /tmp/init-and-add-out.txt
        echo "GENERATED OUTPUT:"
        cat /tmp/init-and-add-out.txt
        echo "ADJUSTING OUTPUT"
        # removes the absolute path
        tail -n +3 /tmp/init-and-add-out.txt > /tmp/init-and-add-out2.txt
        cat /tmp/init-and-add-out2.txt
        mv /tmp/init-and-add-out2.txt /tmp/init-and-add-out.txt
        echo "COMPARING..."
        diff -Bba end-to-end-tests/init-and-add.txt /tmp/init-and-add-out.txt
        export OUT=$?
        if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
        rm wapm.lock
        rm wapm.toml
        rm -rf wapm_packages
        rm /tmp/init-and-add-out.txt
        if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
        exit $OUT
      displayName: 'Regression test: Init a Manifest and Add some dependencies'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

trigger:
  branches:
    include:
    - '*'
