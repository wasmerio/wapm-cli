# source: https://registry.wapm.dev/graphql
# timestamp: Wed Jun 26 2019 15:36:44 GMT-0700 (Pacific Daylight Time)

type Command {
  command: String!
  packageVersion: PackageVersion!
  module: PackageVersionModule!
}

type Contract implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  versions: [ContractVersion]
  lastVersion: ContractVersion
}

type ContractVersion {
  id: ID!
  contract: Contract!
  version: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedBy: User!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

input InputSignature {
  publicKeyKeyId: String!
  data: String!
}

type Mutation {
  publishPublicKey(input: PublishPublicKeyInput!): PublishPublicKeyPayload
  publishPackage(input: PublishPackageInput!): PublishPackagePayload

  """Obtain JSON Web Token mutation"""
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  registerUser(input: RegisterUserInput!): RegisterUserPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebTokenPayload {
  token: String
  clientMutationId: String
  refreshToken: String
}

type Package implements Node {
  name: String!
  namespace: String
  private: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  maintainers: [User]
  versions: [PackageVersion]

  """The ID of the object."""
  id: ID!
  alias: String
  displayName: String!
  lastVersion: PackageVersion

  """The public keys for all the published versions"""
  publicKeys: [PublicKey!]!
}

type PackageConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PackageEdge]!
}

type PackageDistribution {
  downloadUrl: String!
  size: Int!
}

"""A Relay edge containing a `Package` and its cursor."""
type PackageEdge {
  """The item at the end of the edge"""
  node: Package

  """A cursor for use in pagination"""
  cursor: String!
}

type PackageVersion {
  package: Package!
  version: String!
  description: String!
  manifest: String!
  license: String
  licenseFile: String
  readme: String
  repository: String
  homepage: String
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedBy: User!
  signature: Signature
  file: String!
  fileSize: Int!
  commands: [Command]
  distribution: PackageDistribution!
  isLastVersion: Boolean!
  isSigned: Boolean!
}

type PackageVersionConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PackageVersionEdge]!
}

"""A Relay edge containing a `PackageVersion` and its cursor."""
type PackageVersionEdge {
  """The item at the end of the edge"""
  node: PackageVersion

  """A cursor for use in pagination"""
  cursor: String!
}

type PackageVersionModule {
  name: String!
  source: String!
  abi: String
  publicUrl: String!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PublicKey implements Node {
  """The ID of the object."""
  id: ID!
  owner: User!
  keyId: String!
  key: String!
  revokedAt: DateTime
  uploadedAt: DateTime!
  verifyingSignature: Signature
  revoked: Boolean!
}

input PublishPackageInput {
  name: String!
  version: String!
  description: String!
  manifest: String!
  license: String
  licenseFile: String
  readme: String
  repository: String
  homepage: String
  file: String
  signature: InputSignature
  clientMutationId: String
}

type PublishPackagePayload {
  success: Boolean!
  packageVersion: PackageVersion!
  clientMutationId: String
}

input PublishPublicKeyInput {
  keyId: String!
  key: String!
  verifyingSignatureId: String
  clientMutationId: String
}

type PublishPublicKeyPayload {
  success: Boolean!
  publicKey: PublicKey!
  clientMutationId: String
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  packages(before: String, after: String, first: Int, last: Int): PackageConnection
  recentPackageVersions(before: String, after: String, first: Int, last: Int): PackageVersionConnection
  getPackage(name: String!): Package
  getPackages(names: [String!]!): [Package]!
  getPackageVersion(name: String!, version: String): PackageVersion
  getPackageVersions(names: [String!]!): [PackageVersion]
  getContract(name: String!): Contract
  getContracts(names: [String!]!): [Contract]!
  getContractVersion(name: String!, version: String): ContractVersion
  getCommand(name: String!): Command
  getCommands(names: [String!]!): [Command]
  search(query: String!, before: String, after: String, first: Int, last: Int): SearchConnection!
  viewer: User
}

input RefreshInput {
  refreshToken: String!
  clientMutationId: String
}

type RefreshPayload {
  token: String
  payload: GenericScalar
  clientMutationId: String
  refreshToken: String
}

input RegisterUserInput {
  fullName: String!
  email: String!
  username: String!
  password: String!
  clientMutationId: String
}

type RegisterUserPayload {
  token: String
  clientMutationId: String
}

type SearchConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SearchEdge]!
}

"""A Relay edge containing a `Search` and its cursor."""
type SearchEdge {
  """The item at the end of the edge"""
  node: SearchResult

  """A cursor for use in pagination"""
  cursor: String!
}

union SearchResult = PackageVersion

type Signature {
  id: ID!
  publicKey: PublicKey!
  data: String!
  createdAt: DateTime!
}

type User {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  avatar(size: Int): String
}

input VerifyInput {
  token: String!
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar
  clientMutationId: String
}
